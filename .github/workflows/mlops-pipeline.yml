name: Water Potability MLOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 0" # Weekly run to check for data drift

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov httpx
          # Install the package in development mode
          pip install -e .
          
      - name: Create test folders and dummy model
        run: |
          mkdir -p models results
          mkdir -p data monitoring logs web/static/css web/static/js web/templates
          
          # Create a dummy model for testing purposes
          python -c "
          import pickle
          import os
          from sklearn.ensemble import RandomForestClassifier
          
          # Create a simple dummy model
          model = RandomForestClassifier(n_estimators=10)
          
          # Create dummy directories if they don't exist
          os.makedirs('models', exist_ok=True)
          os.makedirs('results', exist_ok=True)
          
          # Save the model
          with open('models/random_forest_model.pkl', 'wb') as f:
              pickle.dump(model, f)
          
          # Create symlink to best model
          with open('results/best_model_20250511_000301.pkl', 'wb') as f:
              pickle.dump(model, f)
          
          # Create symlink for best model
          symlink_path = 'results/best_model.pkl'
          if os.path.exists(symlink_path):
              os.remove(symlink_path)
          os.symlink('results/best_model_20250511_000301.pkl', symlink_path)
          
          print('Created dummy model files for testing')
          "

      - name: Run tests
        run: |
          # Set PYTHONPATH to include the project root
          PYTHONPATH=$PWD pytest src/tests/ --cov=src
        env:
          # Environment variables for tests
          PYTHONPATH: ${{ github.workspace }}
          TEST_MODE: "ci"  # Flag to indicate tests are running in CI

  train-and-evaluate:
    name: Train and Evaluate Model
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc dvc-s3

      - name: Pull data with DVC
        run: |
          dvc pull

      - name: Train model
        run: |
          python src/scripts/train_pipeline.py

      - name: Evaluate model
        run: |
          python src/scripts/evaluate_pipeline.py

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            results/best_model*.pkl
            results/evaluation_results*.json
            results/feature_importance*.csv

      - name: Update DVC tracked files
        run: |
          dvc add models/*.pkl results/best_model*.pkl
          dvc push
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update model artifacts [skip ci]" || echo "No changes to commit"
          git push

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: train-and-evaluate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: results/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/water-potability:latest

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add deployment commands here, e.g., kubectl apply, AWS ECS update, etc.

  model-monitoring:
    name: Model Monitoring
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run model monitoring
        run: |
          python src/scripts/model_monitoring.py

      - name: Check for drift and trigger retraining if needed
        run: |
          # Logic to check for drift and trigger retraining if detected
          # This would typically analyze the monitoring results and create an issue or trigger workflow
          echo "Checking for model drift..."
