name: Water Potability MLOps Pipeline

# Grant read/write on repo contents so 'git push' from GH Actions succeeds
permissions:
  contents: write # 'write' implies 'read' as well :contentReference[oaicite:5]{index=5}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 0" # Weekly run to check for data drift

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

  train-and-evaluate:
    name: Train and Evaluate Model
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # All `run:` steps execute in the repo root ($GITHUB_WORKSPACE) where .dvc/ exists
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git for pushing via PAT
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Reset 'origin' to use a Personal Access Token with repo permissions
          git remote set-url origin https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }}.git

      - name: Clone DVC cache repo
        run: git clone https://github.com/ty-prct/dvc-cache.git ../dvc-cache

      - name: Configure DVC remote and autostage
        run: |
          # Ensure DVC is initialized here
          dvc init --force

          # Automatically stage all .dvc metadata into Git after DVC commands
          dvc config core.autostage true

          # Remove any existing 'cache' remote
          dvc remote remove cache || true
          # Point to the actual DVC blob store in the cloned cache repo
          dvc remote add -d cache ../dvc-cache/.dvc/cache
          dvc remote modify cache url ../dvc-cache/.dvc/cache
          dvc remote modify cache verify true

          # List remotes for verification
          dvc remote list

      - name: Pull data with DVC
        run: |
          dvc pull --remote cache --verbose --force

      - name: Train model
        run: python src/scripts/train_pipeline.py

      - name: Evaluate model
        run: python src/scripts/evaluate_pipeline.py

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            results/best_model*.pkl
            results/evaluation_results*.json
            results/feature_importance*.csv

      - name: Update DVC tracked files
        run: |
          # Track new model artifacts
          dvc add models/*.pkl results/best_model*.pkl

          # Push them to the DVC cache
          dvc push --remote cache

          # Commit DVC metadata changes (autostaged)
          git add .
          git commit -m "Update model artifacts [skip ci]" || echo "No changes to commit"
          git push

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: train-and-evaluate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: results/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/water-potability:latest

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here

  model-monitoring:
    name: Model Monitoring
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run model monitoring
        run: python src/scripts/model_monitoring.py

      - name: Check for drift and trigger retraining if needed
        run: |
          echo "Checking for model drift..."
